// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (search)
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "iotics/api/common.proto";
import "iotics/api/feed.proto";
import "iotics/api/input.proto";
package iotics.api;

option csharp_namespace = "Iotics.Api";
option go_package = "github.com/Iotic-Labs/iotic-go-proto-qapi/iotics/api;ioticsapi";
option java_multiple_files = true;
option java_outer_classname = "SearchProto";
option java_package = "com.iotics.api";
option objc_class_prefix = "IAX";
option php_namespace = "Iotics\\Api";

// ---------------------------------------------------------------------------------------------------------------------


// SearchAPI provides a set of services to run synchronous and asynchronous search.
// Services only affect local resources, unless stated otherwise.
service SearchAPI {
  // Send a search request. Results are expected asynchronously. (local and remote)
  rpc DispatchSearchRequest(SearchRequest) returns (DispatchSearchResponse) {}

  // Run a synchronous search based on a user timeout. (local and remote)
  rpc SynchronousSearch(SearchRequest) returns (stream SearchResponse) {}

  // Receive all search responses associated to a set of Search request for a given client application ID.
  rpc ReceiveAllSearchResponses(SubscriptionHeaders) returns (stream SearchResponse) {}
}

// ResponseType describes the type of the search response.
// - FULL - Returns full responses including twins and feeds identifiers, labels/comments (for all languages if no language provided), properties and location
// - LOCATED - Returns located responses including twins identifier, location and label (for the provided language or default)
// - MINIMAL - Returns minimal responses including twins identifier only
enum ResponseType {
  FULL = 0;
  LOCATED = 1;
  MINIMAL = 2;
}

// SearchRequest describes a search request used for both synchronous and asynchronous search.
message SearchRequest {
  // Search request payload.
  message Payload {
    // Expected response type
    ResponseType responseType = 1;
    // UTC time (millis from epoch / unix time) when this search request has to be considered expired.
    google.protobuf.Timestamp expiryTimeout = 2;

    // Search request filters, any of these can be used in combination or on their own.
    message Filter {
      // Text filtering. One or more keywords which must match text from twin properies. Note that any (rather than all)
      // of the keywords will produce a match.
      google.protobuf.StringValue text = 1;
      // Location filtering: area within which twins must be located
      GeoCircle location = 2;
      // Properties filtering: one or more exact properties, all of which twins must have.
      repeated Property properties = 3;
    }
    // Search Request filters
    Filter filter = 3;
  }
  // Search request headers
  Headers headers = 1;

  // Search request scope
  Scope scope = 2;

  // Search request language, applicable to text filtering. If not specified, text search will match any language.
  google.protobuf.StringValue lang = 3;

  // Search request payload
  Payload payload = 6;

  // Search request range
  Range range = 20;
}

// ---------------------------------------------------------------------------------------------------------------------

// SearchResponse describes a result associated to a search request.
// It contains all the matching twins/feeds according to the request scope/range/lang/filters in the expected response type format.
// In the decentralised iotics operating environment, each node in the network generates a response and the client is expected to
// receive a stream of response messages.
message SearchResponse {
  // Search response feed details. Included with response type: FULL.
  message FeedDetails {
    // Feed
    Feed feed = 1;
    // whether offers the ability to store last received value
    bool storeLast = 3;
    // Feed custom properties.
    repeated Property properties = 4;

  }
  // Search response input details. Included with response type: FULL.
  message InputDetails {
    // Input
    Input input = 1;
    // Input custom properties.
    repeated Property properties = 4;
  }

  // Search response twin details.
  message TwinDetails {
    // Twin identifier. Included with response type: FULL, LOCATED and MINIMAL
    TwinID id = 1;
    // Twin location (if set). Included with response type: FULL and LOCATED
    GeoLocation location = 2;
    // Twin visibility. Enum that defines a twins level of visibility.
    Visibility visibility = 3;
    // Twin custom properties.
    repeated Property properties = 5;
    // Feed details. Included with response type: FULL
    repeated FeedDetails feeds = 10;
    // Input details. Included with response type: FULL
    repeated InputDetails inputs = 11;
  }

  Headers headers = 1;
  // Search Response Payload.
  message Payload {
    // Type of the response.
    ResponseType responseType = 1;
    // Response status - if present indicates that this response is invalid
    google.rpc.Status status = 2;
    // Response host identifier - indicates from which host this response comes from
    HostID remoteHostId = 4;

    // Matching twins
    repeated TwinDetails twins = 10;
  }
  // Search response payload
  Payload payload = 2;

}

// ---------------------------------------------------------------------------------------------------------------------

// Dispatch Search Response message.
message DispatchSearchResponse{

}
