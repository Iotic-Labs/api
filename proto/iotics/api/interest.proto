// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (interests)
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "iotics/api/common.proto";
import "iotics/api/feed.proto";
import "iotics/api/input.proto";

package iotics.api;

option csharp_namespace = "Iotics.Api";
option go_package = "github.com/Iotic-Labs/iotic-go-proto-qapi/iotics/api;ioticsapi";
option java_multiple_files = true;
option java_outer_classname = "InterestProto";
option java_package = "com.iotics.api";
option objc_class_prefix = "IAX";
option php_namespace = "Iotics\\Api";

// ---------------------------------------------------------------------------------------------------------------------


// InterestAPI enables creation and management of interests between a twin and a feed.
service InterestAPI {
  // Fetch feed data for this interest. (local and remote)
  rpc FetchInterests(FetchInterestRequest) returns (stream FetchInterestResponse) {}

  // Fetch last data shared on this interest. (local and remote)
  rpc FetchLastStored(FetchLastStoredRequest) returns (FetchInterestResponse) {}

  // List all interests associated to a given follower twin (Not implemented yet).
  rpc ListAllInterests(ListAllInterestsRequest) returns (ListAllInterestsResponse) {}

  // Create an interest between a follower twin and a followed feed. (Not implemented yet).
  rpc CreateInterest(CreateInterestRequest) returns (CreateInterestResponse) {}

  // Delete an existing interest. (Not implemented yet).
  rpc DeleteInterest(DeleteInterestRequest) returns (DeleteInterestResponse) {}

  // Send a message to an input. (local and remote)
  rpc SendInputMessage(SendInputMessageRequest) returns (SendInputMessageResponse) {}

}

// An interest is the relationship between a Twin and an Input.
message InputInterest {
  // InputInterest destination input identification.
  message DestinationInput {
    // Input to send the message to
    Input input = 1;
    // HostID to identify a remote input (Optional, keep empty if input is local)
    HostID hostId = 2;
  }
  // Sender twin unique identifier.
  TwinID senderTwinId = 1;

  // a reference to the input of interest
  DestinationInput destInput = 2;
}

// SendInputMessageRequest is used to send a message to a given input.
message SendInputMessageRequest {
  // SendInputMessageRequest payload.
  message Payload {
    // Message to send
    InputMessage message = 1;
  }
  // SendInputMessageRequest arguments.
  message Arguments {
    // The interest
    InputInterest interest = 1;
  }
  // SendInputMessageRequest headers
  Headers headers = 1;
  // SendInputMessageRequest mandatory arguments
  Arguments args = 2;
  // SendInputMessageRequest payload
  Payload payload = 3;
}

// SendInputMessageResponse is used to indicate a successful send.
message SendInputMessageResponse {
  // SendInputMessageResponse headers
  Headers headers = 1;
}

// An interest is the relationship between a Twin and a Feed. For example, creating
// an interest on (following) a Feed results in any data shared on said Feed to be forwarded to
// the associated Twin. Interests can be revoked either by the subscriber or provider and there
// may only be one interest between any unique Twin and Feed combination.
message Interest {
  // FollowedFeed fully identify the (local or remote) feed to follow.
  message FollowedFeed {
    // Followed feed identifier
    Feed feed = 1;
    // Feed remote host identifier (If not specified, the Interest is taken to be in scope of the host from which a request is made.)
    HostID hostId = 2;
  }

  // Follower twin unique identifier.
  TwinID followerTwinId = 2;

  // a reference to the interested feed
  FollowedFeed followedFeed = 3;

}

// CreateInterestRequest is used to create an interest between a twin and a feed.
message CreateInterestRequest {
  // CreateInterestRequest payload.
  message Payload {
    Interest interest = 2;
  }
  // CreateInterestRequest mandatory arguments.
  message Arguments {
    // Follower twin unique identifier
    TwinID twinId = 1;
  }

  // CreateInterestRequest headers
  Headers headers = 1;
  // CreateInterestRequest arguments
  Arguments args = 2;
  // CreateInterestRequest payload
  Payload payload = 3;
}

// CreateInterestResponse describes a successfully created interest.
message CreateInterestResponse {
  // CreateInterestResponse payload.
  message Payload {
    // Created interest
    Interest interest = 2;

    // whether the interest exists already (creating an existing interest is idempotent).
    bool alreadyCreated = 3;
  }
  // CreateInterestResponse headers
  Headers headers = 1;
  // CreateInterestResponse payload
  Payload payload = 2;
}

// ---------------------------------------

// ListAllInterestsRequest is used to list all interests initiated by a given twin.
message ListAllInterestsRequest {
  // ListAllInterestsRequest mandatory arguments.
  message Arguments {
    // Follower twin unique identifier
    TwinID twinId = 1;
  }

  // ListAllInterestsRequest headers
  Headers headers = 1;
  // ListAllInterestsRequest arguments
  Arguments args = 2;
  // Limit the results according to the value (optional: when not supplied, assume no default limits required - platform specific)
  Range range = 20;
}


// ListAllInterestsResponse describes all the interest initiated by the given twin.
message ListAllInterestsResponse {
  // ListAllInterestsResponse payload.
  message Payload {
    repeated Interest interests = 1;
  }
  // ListAllInterestsResponse headers
  Headers headers = 1;
  // ListAllInterestsResponse payload.
  Payload payload = 2;
}

// ---------------------------------------

// FetchInterestRequest is used to initiate a stream to get the feed data shared on a given interest.
message FetchInterestRequest {
  // FetchInterestRequest mandatory arguments.
  message Arguments {
    // The interest
    Interest interest = 1;
  }
  // FetchInterestRequest headers
  Headers headers = 1;
  // FetchInterestRequest arguments
  Arguments args = 2;
  // whether to fetch the last stored value if available (false by default)
  google.protobuf.BoolValue fetchLastStored = 3;
}

// FetchInterestResponse describes a feed value shared on a given interest.
message FetchInterestResponse {
  // FetchInterestResponse payload.
  message Payload {
    // The interest
    Interest interest = 1;
    // The shared data
    FeedData feedData = 2;
  }
  // FetchInterestResponse headers
  Headers headers = 1;
  // FetchInterestResponse payload
  Payload payload = 2;
}

// ---------------------------------------

// FetchLastStoredRequest is used to fetch the last stored value on a given interest if available.
message FetchLastStoredRequest {
  // FetchLastStoredRequest mandatory arguments.
  message Arguments {
    // The interest
    Interest interest = 1;
  }
  // FetchLastStoredRequest headers
  Headers headers = 1;
  // FetchLastStoredRequest arguments
  Arguments args = 2;
}

// ---------------------------------------

// DeleteInterestRequest is used to delete an interest.
message DeleteInterestRequest {
  // DeleteInterestRequest mandatory arguments.
  message Arguments {
    // The interest
    Interest interest = 1;
  }
  // DeleteInterestRequest headers
  Headers headers = 1;
  // DeleteInterestRequest args
  Arguments args = 2;
}

// DeleteInterestResponse describes a deleted interest.
message DeleteInterestResponse {
  // DeleteInterestResponse payload.
  message Payload {
    // The deleted interest.
    Interest interest = 1;
  }
  // DeleteInterestResponse headers
  Headers headers = 1;
  // DeleteInterestResponse payload
  Payload payload = 2;
}
