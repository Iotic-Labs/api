// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (hosts)
syntax = "proto3";

package iotics.api.v2;

import "google/api/annotations.proto";
import "iotics/api/v2/common.proto";
import "annotations.proto";

option csharp_namespace = "Iotics.Api";
option go_package = "github.com/Iotic-Labs/iotic-go-proto-qapi/iotics/api;ioticsapi";
option java_multiple_files = true;
option java_outer_classname = "HostProto";
option java_package = "com.iotics.api";
option objc_class_prefix = "IAX";
option php_namespace = "Iotics\\Api";

// ---------------------------------------------------------------------------------------------------------------------


// HostAPI enables management of Iotics host twins.
// Services only affect local resources, unless stated otherwise.
service HostAPI {
  option (openapi.service_params) = { headers: [
    {
      name:"Iotics-ClientAppId",
      description:"User namespace used to group all the requests/responses."
    },
    {
      name:"Iotics-ClientRef",
      description: "Optional client reference. Any responses associated with the request will include this reference."
    },
    {
      name:"Iotics-ConsumerGroup",
      description:"Used for group listener, optional - Not implemented yet."
    },
    {
      name:"Iotics-RequestTimeout",
      description:"Client request timeout used to stop the request processing once the timeout is reached."
    },
    {
      name:"Iotics-TransactionRef",
      description:"Used to loosely link requests/responses in a distributed environment each layer can add its own id to the list. Transaction ref is limited to a max of 16 elements per list and, for each list item, a max length of 36 characters."
    }
  ]};
  // GetHostID gets the ID of the host twin.
  rpc GetHostID(GetHostIDRequest) returns (GetHostIDResponse) {
    option (google.api.http) = {
      get: "/api/v2/host/id"
    };
  }
}

// GetHostIDRequest: gets the local host twin's ID
message GetHostIDRequest {
  Headers headers = 1;
}

// GetHostIDResponse: response containing the local host twin's ID
message GetHostIDResponse {
  message Payload {
    string hostId = 1;
  }
  Headers headers = 1;

  Payload payload = 2;
}
