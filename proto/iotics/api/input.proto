// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (input)
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "iotics/api/common.proto";

package iotics.api;

option csharp_namespace = "Iotics.Api";
option go_package = "github.com/Iotic-Labs/iotic-go-proto-qapi/iotics/api;ioticsapi";
option java_multiple_files = true;
option java_outer_classname = "InputProto";
option java_package = "com.iotics.api";
option objc_class_prefix = "IAX";
option php_namespace = "Iotics\\Api";

// ---------------------------------------------------------------------------------------------------------------------

// Input API groups all the actions link to a twin input.
// Services only affect local resources, unless stated otherwise.
service InputAPI {

  // Deletes an input. (Idempotent)
  rpc DeleteInput(DeleteInputRequest) returns (DeleteInputResponse) {}

  // Describes an input. (local and remote)
  rpc DescribeInput(DescribeInputRequest) returns (DescribeInputResponse) {}

  // Receives input messages for a specific input.
  rpc ReceiveInputMessages(ReceiveInputMessageRequest) returns (stream ReceiveInputMessageResponse) {}

  // Creates an input owned by a twin. (Idempotent)
  rpc CreateInput(CreateInputRequest) returns (CreateInputResponse) {}

  // Updates attributes of an input, including its metadata.
  rpc UpdateInput(UpdateInputRequest) returns (UpdateInputResponse) {}
}

// Representation of an input.
message InputID {
  // Input Identifier string representation (simple string) (unique within the scope of a twin identifier's input set)
  string id = 1;
  // Twin identifier string representation (simple string) (twin to which the input belongs)
  string twinId = 2;
  // Host identifier string representation (simple string) (Host to which the twin belongs)
  string hostId = 3;
}
// ---------------------------------------

// DeleteInputRequest is used to delete an input from a given twin.
message DeleteInputRequest {
  // DeleteInputRequest arguments.
  message Arguments {
    // Input to delete
    InputID inputId = 1;
  }

  // DeleteInputRequest headers
  Headers headers = 1;
  // DeleteInputRequest mandatory arguments
  Arguments args = 2;
}

// DeleteInputResponse describes a deleted input.
message DeleteInputResponse {
  // DeleteInputResponse payload.
  message Payload {
    // Deleted input
    InputID inputId = 1;
  }

  // DeleteInputResponse headers
  Headers headers = 1;
  // DeleteInputResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// CreateInputRequest describes a created input.
message CreateInputRequest {
  // CreateInputRequest payload.
  message Payload {
    // Input identifier string representation (simple string) (unique within the scope of a twin identifier's input set)
    string id = 1;
  }

  // Arguments describes the mandatory arguments to identify the twin owning this input
  message Arguments {
    // Identifier of the twin owning this input
    TwinID twinId = 1;
  }

  // CreateInputRequest headers
  Headers headers = 1;
  // CreateInputRequest arguments
  Arguments args = 2;
  // CreateInputRequest payload
  Payload payload = 3;
}
// ---------------------------------------

// CreateInputResponse describes a created input.
message CreateInputResponse {
  // CreateInputResponse payload.
  message Payload {
    // Created input
    InputID inputId = 1;
  }

  // CreateInputResponse headers
  Headers headers = 1;
  // CreateInputResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// UpdateInputRequest is used to update an input.
message UpdateInputRequest {
  // UdpateInputRequest payload used to update one or more field
  message Payload {
    // Values describe individual data items to add/remove
    Values values = 1;
    // Properties describe individual properties to add/remove. Note only custom properties can be modified here.
    PropertyUpdate properties = 2;
  }
  // UpdateInputRequest arguments
  message Arguments {
    // Input to update
    InputID inputId = 1;
  }

  // UpdateInputRequest headers
  Headers headers = 1;
  // UpdateInputRequest arguments
  Arguments args = 2;
  // UpdateInputRequest payload
  Payload payload = 3;
}

// UpdateInputResponse describes an updated input.
message UpdateInputResponse {
  // UpdateInputResponse payload.
  message Payload {
    // Updated input
    InputID inputId = 1;
  }

  // UpdateInputResponse headers
  Headers headers = 1;
  // UpdateInputResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// DescribeInputRequest is used to request the input metadata.
message DescribeInputRequest {
  // DescribeInputRequest arguments.
  message Arguments {
    // Input to describe
    InputID inputId = 1;
  }

  // DescribeInputRequest headers
  Headers headers = 1;
  // DescribeInputRequest mandatory arguments
  Arguments args = 2;
}

// DescribeInputResponse provides metadata lookup for individual input resources.
message DescribeInputResponse {
  // DescribeInputResponse metadata result.
  message MetaResult {
    // Values semantically describing the Input messages
    repeated Value values = 1;
    // Custom properties associated with this input.
    repeated Property properties = 2;
  }
  // DescribeInputResponse payload.
  message Payload {
    // Described input
    InputID inputId = 1;
    // Metadata result
    MetaResult result = 2;
  }

  // DescribeInputResponse headers
  Headers headers = 1;
  // DescribeInputResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// UpsertInputWithMeta is used to describe the full input state. Used in UpsertTwinRequest.
message UpsertInputWithMeta {
  // Input Identifier string representation (simple string) (unique within the scope of a twin identifier's input set)
  string id = 1;
  // Values to set
  repeated Value values = 2;
  // Properties to set
  repeated Property properties = 3;
}
// ---------------------------------------

// InputMessage describes a message that can be sent to an input
message InputMessage {
  // OccurredAt is the UTC timestamp of the message.
  // Typically this is either the time at which an application sent this message
  // or the time applicable to the message itself. (Optional: set to host time if not provided)
  google.protobuf.Timestamp occurredAt = 1;
  // Mime is the mime type of the encoded data.
  string mime = 2;
  // Data is the actual message, encoded according the the mime type. The data should follow the Input's
  // value definitions but that is not enforced. (See also Value)
  bytes data = 3;
}
// ---------------------------------------

// ReceiveInputMessageRequest is used to receive messages sent to a given Input.
message ReceiveInputMessageRequest {
  // ReceiveInputMessageRequest arguments.
  message Arguments {
    // Input to listen messages from
    InputID inputId = 1;
  }

  // ReceiveInputMessageRequest headers
  Headers headers = 1;
  // ReceiveInputMessageRequest mandatory arguments
  Arguments args = 2;
}

// ReceiveInputMessageResponse contains a message sent to the Input.
message ReceiveInputMessageResponse {
  message Payload {
    // Input the message has been sent to
    InputID inputId = 1;
    // Input message
    InputMessage message = 2;
  }

  // ReceiveInputMessageResponse headers
  Headers headers = 1;
  // ReceiveInputMessageResponse payload
  Payload payload = 2;
}
// ---------------------------------------
