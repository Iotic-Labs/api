// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (feed)
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "iotics/api/common.proto";

package iotics.api;

option csharp_namespace = "Iotics.Api";
option go_package = "github.com/Iotic-Labs/iotic-go-proto-qapi/iotics/api;ioticsapi";
option java_multiple_files = true;
option java_outer_classname = "InputProto";
option java_package = "com.iotics.api";
option objc_class_prefix = "IAX";
option php_namespace = "Iotics\\Api";

// ---------------------------------------------------------------------------------------------------------------------

// Input API groups all the actions link to a twin input
service InputAPI {

  // Deletes an input. (Idempotent - local only)
  rpc DeleteInput(DeleteInputRequest) returns (DeleteInputResponse) {}

  // Describe an input (local or remote)
  rpc DescribeInput(DescribeInputRequest) returns (DescribeInputResponse) {}

  // Send a message to an input (local or remote)
  rpc SendInputMessage(SendInputMessageRequest) returns (SendInputMessageResponse) {}

  // Receive input messages (local only)
  rpc ReceiveInputMessages(ReceiveInputMessageRequest) returns (stream ReceiveInputMessageResponse) {}
}

// Representation of an input.
message Input {
  // Input identifier (unique within the scope of a twin identifier input set)
  InputID id = 1;
  // Twin unique identifier (twin to which the input belongs)
  TwinID twinId = 2;
}
// ---------------------------------------

// DeleteInputRequest is used to delete an input from a given twin.
message DeleteInputRequest {
  // DeleteInputRequest arguments.
  message Arguments {
    // Input to delete
    Input input = 1;
  }

  // DeleteInputRequest headers
  Headers headers = 1;
  // DeleteInputRequest mandatory arguments
  Arguments args = 2;
}

// DeleteInputResponse describes a deleted input.
message DeleteInputResponse {
  // DeleteInputResponse payload.
  message Payload {
    // Deleted input
    Input input = 1;
  }

  // DeleteInputResponse headers
  Headers headers = 1;
  // DeleteInputResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// DescribeInputRequest is used to request the input metadata.
message DescribeInputRequest {
  // DescribeInputRequest arguments.
  message Arguments {
    // Input to describe
    Input input = 1;
    // HostID to describe a remote input (Optional, keep empty if input is local)
    HostID remoteHostId = 2;
  }

  // DescribeInputRequest headers
  Headers headers = 1;
  // DescribeInputRequest mandatory arguments
  Arguments args = 2;
}

// DescribeInputResponse provides metadata lookup for individual input resources.
message DescribeInputResponse {
  // DescribeInputResponse metadata result.
  message MetaResult {
    // Values semantically describing the Input messages
    repeated Value values = 1;
    // Custom properties associated with this input.
    repeated Property properties = 2;
  }
  // DescribeInputResponse payload.
  message Payload {
    // Described input
    Input input = 1;
    // Metadata result
    MetaResult result = 2;
    // HostID of the described input. (Optional, empty if input is local)
    HostID remoteHostId = 3;
  }

  // DescribeInputResponse headers
  Headers headers = 1;
  // DescribeInputResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// UpsertInputWithMeta is used to describe the full input state. Used in UpsertTwinRequest.
message UpsertInputWithMeta {
  // Id of the input to create/update
  string id = 1;
  // Values to set
  repeated Value values = 2;
  // Properties to set
  repeated Property properties = 3;
}
// ---------------------------------------

// InputMessage describe a message that can be sent to an input
message InputMessage {
  // OccurredAt is the UTC timestamp of the message.
  // Typically this is either the time at which an application sent this message
  // or the time applicable to the message itself. (Optional: set to host time is not provided)
  google.protobuf.Timestamp occurredAt = 1;
  // Mime is the mime type of the encoded data.
  string mime = 2;
  // Data is the actual message, encoded according the the mime type. The data should follow the Input's
  // value definitions but that is not enforced. (See also Value)
  bytes data = 3;
}
// ---------------------------------------

// ReceiveInputMessageRequest is used to receive messages sent to a given Input.
message ReceiveInputMessageRequest {
  // ReceiveInputMessageRequest arguments.
  message Arguments {
    // Input to listen messages from
    Input input = 1;
  }

  // ReceiveInputMessageRequest headers
  Headers headers = 1;
  // ReceiveInputMessageRequest mandatory arguments
  Arguments args = 2;
}

// ReceiveInputMessageResponse contains a message sent to the Input.
message ReceiveInputMessageResponse {
  message Payload {
    // Input the message has been sent to
    Input input = 1;
    // Input message
    InputMessage message = 2;
  }

  // ReceiveInputMessageResponse headers
  Headers headers = 1;
  // ReceiveInputMessageResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// SendInputMessageRequest is used to send a message to a given input
message SendInputMessageRequest {
  // SendInputMessageRequest payload.
  message Payload {
    // Message to send
    InputMessage message = 1;
  }
  // SendInputMessageRequest arguments
  message Arguments {
    // Input to send the message to
    Input input = 1;
    // HostID to identify a remote input (Optional, keep empty if input is local)
    HostID hostId = 2;
  }

  // SendInputMessageRequest headers
  Headers headers = 1;
  // SendInputMessageRequest mandatory arguments
  Arguments args = 2;
  // SendInputMessageRequest payload
  Payload payload = 3;
}

// SendInputMessageResponse is used to indicate a successful send.
message SendInputMessageResponse {
  // SendInputMessageResponse headers
  Headers headers = 1;
}
