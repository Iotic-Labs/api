// Copyright (c) 2019-2022 Iotic Labs Ltd. All rights reserved.

// Iotics Web protocol definitions (feed)
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "iotics/api/common.proto";

package iotics.api;

option csharp_namespace = "Iotics.Api";
option go_package = "github.com/Iotic-Labs/iotic-go-proto-qapi/iotics/api;ioticsapi";
option java_multiple_files = true;
option java_outer_classname = "FeedProto";
option java_package = "com.iotics.api";
option objc_class_prefix = "IAX";
option php_namespace = "Iotics\\Api";

// ---------------------------------------------------------------------------------------------------------------------


// Create a feed owned by the provided twin.
// A twin may have one or more feeds. Any twin can subscribe to a feed (access control permitting).
// A feed generates data in a 1-to-many relationship: one feed may produce data that is used by many consumers (twins).
// Services only affect local resources, unless stated otherwise.
service FeedAPI {
  // Creates a feed owned by a twin. (Idempotent)
  rpc CreateFeed(CreateFeedRequest) returns (CreateFeedResponse) {}

  // Deletes a feed owned by a twin. (Idempotent)
  rpc DeleteFeed(DeleteFeedRequest) returns (DeleteFeedResponse) {}

  // Updates attributes of a feed, including its metadata.
  rpc UpdateFeed(UpdateFeedRequest) returns (UpdateFeedResponse) {}

  // Shares a new sample of data for the given feed which any (interest) subscribers can receive.
  rpc ShareFeedData(ShareFeedDataRequest) returns (ShareFeedDataResponse) {}

  // Lists all feeds owned by a twin.
  rpc ListAllFeeds(ListAllFeedsRequest) returns (ListAllFeedsResponse) {}

  // Describes a feed. (local and remote)
  rpc DescribeFeed(DescribeFeedRequest) returns (DescribeFeedResponse) {}
}

// A feed representation.
message Feed {
  // Feed identifier (unique within the scope of a twin identifier's feed set)
  FeedID id = 1;
  // Twin unique identifier (twin to which the feed belongs)
  TwinID twinId = 2;
}

// CreateFeedRequestCreate is used to create a new feed in a given twin.
message CreateFeedRequest {
  // Payload describes the data needed to create a feed.
  message Payload {
    // ID of the feed to create
    FeedID feedId = 1;
    // StoreLast indicates if the last received value should be stored of not
  }
  // Arguments describes the mandatory arguments to identify the twin the feed belongs to.
  message Arguments {
    // Identifier of the twin owning this feed
    TwinID twinId = 1;
  }

  // CreateFeedRequest headers
  Headers headers = 1;
  // CreateFeedRequest mandatory arguments
  Arguments args = 2;
  // CreateFeedRequest payload
  Payload payload = 3;
}

// CreateFeedResponse describes a created feed.
message CreateFeedResponse {
  // CreateFeedResponse payload.
  message Payload {
    // The created feed
    Feed feed = 1;
  }

  // CreateFeedResponse headers
  Headers headers = 1;
  // CreateFeedResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// DeleteFeedRequest is used to delete a feed from a given twin.
message DeleteFeedRequest {
  // DeleteFeedRequest arguments.
  message Arguments {
    // Feed to delete
    Feed feed = 1;
  }

  // DeleteFeedRequest headers
  Headers headers = 1;
  // DeleteFeedRequest mandatory arguments
  Arguments args = 2;
}

// DeleteFeedResponse describes a deleted feed.
message DeleteFeedResponse {
  // DeleteFeedResponse payload.
  message Payload {
    // Deleted feed
    Feed feed = 1;
  }

  // DeleteFeedResponse headers
  Headers headers = 1;
  // DeleteFeedResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// UpdateFeedRequest is used to update attributes (including metadata) of a given feed.
message UpdateFeedRequest {
  // UpdateFeedRequest payload. One or more fields can be provided, depending on what needs to be updated.
  // Note that the specified metadata changes are applied in the following order:
  // tags, values, labels, comments
  message Payload {
    // StoreLast dictates whether to store the last shared sample of a feed.
    google.protobuf.BoolValue storeLast = 1;
    // Values are descriptive individual data items to add/remove.
    Values values = 3;
    // Custom properties to add/remove. Internal properties (such as location) cannot be modified here.
    PropertyUpdate properties = 6;
  }
  // UpdateFeedRequest arguments.
  message Arguments {
    Feed feed = 1;
  }

  // UpdateFeedRequest headers
  Headers headers = 1;
  // UpdateFeedRequest arguments
  Arguments args = 2;
  // UpdateFeedRequest payload
  Payload payload = 3;
}

// UpdateFeedResponse is used to indicate a successful update.
message UpdateFeedResponse {
  // UpdateFeedResponse payload.
  message Payload {
    // Updated feed
    Feed feed = 1;
  }

  // UpdateFeedResponse headers
  Headers headers = 1;
  //UpdateFeedResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// ShareFeedDataRequest is used to share a new sample of data for the given feed.
message ShareFeedDataRequest {
  // ShareFeedDataRequest payload.
  message Payload {
    // Sample to share
    FeedData sample = 1;
  }
  // ShareFeedDataRequest arguments.
  message Arguments {
    // Feed sharing the sample
    Feed feed = 1;
  }

  // ShareFeedDataRequest headers
  Headers headers = 1;
  // ShareFeedDataRequest arguments
  Arguments args = 2;
  // ShareFeedDataRequest payload
  Payload payload = 3;

}

// ShareFeedDataResponse is used to indicate a successful feed share.
message ShareFeedDataResponse {
  // ShareFeedDataResponse headers
  Headers headers = 1;
}
// ---------------------------------------

// ListAllFeedsRequest is used to list all the feeds owned by a given twin.
message ListAllFeedsRequest {
  // ListAllFeedsRequest mandatory arguments.
  message Arguments {
    // Identifier of the twin owning this feed
    TwinID twinId = 1;
  }

  // ListAllFeedsRequest headers
  Headers headers = 1;
  // ListAllFeedsRequest arguments
  Arguments args = 2;
  // Limit the results according to the value
  // (optional: when not supplied, assume no default limits required - See https://ioticlabs.atlassian.net/browse/FO-1362)
  Range range = 3;
}

// ListAllFeedsResponse describes the list of the feeds owned by a twin.
message ListAllFeedsResponse {
  // ListAllFeedsResponse payload.
  message Payload {
    // List of the feeds owned by the twin
    repeated Feed feeds = 1;
  }

  // ListAllFeedsResponse headers
  Headers headers = 1;
  // ListAllFeedsResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// Description of twin: Provides public metadata lookup for individual resources.
message DescribeFeedRequest {
  // DescribeFeedRequest arguments.
  message Arguments {
    // Feed to describe
    Feed feed = 1;
    // HostID to describe a remote feed (Optional, keep empty if feed is local)
    HostID remoteHostId = 2;
  }

  // DescribeFeedRequest headers
  Headers headers = 1;
  // DescribeFeedRequest mandatory arguments
  Arguments args = 3;
}

// Describe feed response.
message DescribeFeedResponse {
  // Metadata result databag.
  message MetaResult {
    // Values semantically describing the share payload of Feed
    repeated Value values = 2;
    // Whether this feed might have its most recent data sample stored. If so, it can be retrieved via FetchLastStored
    // request. (See interest API)
    bool storeLast = 5;

    // Custom properties associated with this feed.
    repeated Property properties = 6;
  }
  // DescribeFeedResponse payload.
  message Payload {
    // Described feed
    Feed feed = 1;
    // Metadata result
    MetaResult result = 2;
    // HostID of the described feed. (Optional, empty if feed is local)
    HostID remoteHostId = 3;
  }

  // DescribeFeedResponse headers
  Headers headers = 1;
  // DescribeFeedResponse payload
  Payload payload = 2;
}
// ---------------------------------------

// UpsertFeedWithMeta is used to describe the full feed state. Used in UpsertTwinRequest.
message UpsertFeedWithMeta {
  // Id of the feed to create/update
  string id = 1;
  // StoreLast dictates whether to store the last shared sample of the feed. Default 'False'
  bool storeLast = 4;
  // Values to set
  repeated Value values = 5;
  // Feed properties to set
  repeated Property properties = 6;
}
